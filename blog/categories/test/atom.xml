<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Test | 沉默的大多数]]></title>
  <link href="http://xuwugui.github.io/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://xuwugui.github.io/"/>
  <updated>2013-06-24T09:28:36+08:00</updated>
  <id>http://xuwugui.github.io/</id>
  <author>
    <name><![CDATA[徐无鬼]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2 Test Tips]]></title>
    <link href="http://xuwugui.github.io/blog/2013/06/21/2-test-tips/"/>
    <updated>2013-06-21T10:43:00+08:00</updated>
    <id>http://xuwugui.github.io/blog/2013/06/21/2-test-tips</id>
    <content type="html"><![CDATA[<h2>Mock Current Time</h2>

<p>在项目中，有时会使用到系统当前时间，时间的精度往往为millisecond。由于系统代码执行的延时，在单元测试中的执行时间和源码中的执行时间往往是不同的。因此有如下解决方案:</p>

<ol>
<li>降低精度，即将时间的精度降为second级，掩盖系统延时。这种方法简单易行，但在某些情况下会出错，如:

<ul>
<li>系统延时较大，超过second级别。</li>
<li>当前时间为时间交界点。如在项目代码中执行的时间为10:59:59:999，而在测试中执行的时间为11:00:00:100。</li>
</ul>
</li>
<li>使用verify的形式来验证项目代码中设置当前时间的方法(如System.currentTimeMillis)被执行。此函数为static函数，并且声明包含final，故不可用powerMock。还好jodaTime对此类测试有支持(或许这正是其将now()定为final的原因），可以使用FakeObject的方法。示例如下:
使用<code>System.currentTimeMillis()</code>来取当前时间的地方替换为<code>DateTimeUtils.currentTimeMillis()</code></li>
</ol>


<p><code>java
long now = new DateTime(1970, 1, 1, 1, 1, 1).getMillis();//create dateTime object
DateTimeUtils.setCurrentMillisFixed(now);//Fake now()
assertThat(expectCurrentTime, is(now));
</code>
此法使用的是FakeObject的方法，将now()对象的返回值fake为一个预设的对象。
此时的影响是全局的，故而要在结束时将其恢复为正常的系统时间。</p>

<p><code>java
DateTimeUtils.setCurrentMillisSystem();//reset now()
</code></p>

<h2>Object Matcher</h2>

<p>单元测试中对象的比较。有时我们需要在单元测试中比较两个对象的field而不是地址，
但在产品代码中没有equals方法，然而我们不应该仅仅因为测试需要而增加产品代码，
这种麻烦的情况就需要hamcrest中matcher的帮助了。
例如我们有一个类:</p>

<p>``` java
public class Foo {</p>

<pre><code>private String name;
public Foo(String name) {
    this.name = name;
}
public String getName() {
    return name;
}
</code></pre>

<p>}
```
我们想要做如下测试:</p>

<p>``` java
public class FooTest {</p>

<pre><code>@Test
public void should_compare_foo() {
    Foo foo = new Foo("foo");
    assertThat(foo,is(new Foo("foo"));
}
</code></pre>

<p>}
```
我们仅想要比较对象的某些field是否相同，此例为name，但Foo并没有equals方法。Foo至今貌似也不需要equals方法。
我们可以发现assertThat的第二个参数是Matcher类型，或许我们可以extend自己的matcher方法。这里引入ArgumentMatcher<T>，
顾名思义，参数匹配器。</p>

<p>``` java
public class FooMatcher extends ArgumentMatcher<Foo> {</p>

<pre><code>private Foo actualFoo;
private String name;

public FooMatcher(String name) {
    this.name = name;
}

@Override
public boolean matches(Object object) {
    actualFoo = (Foo) object;
    return name.equals(actualFoo.getName());
}
@Override
public void describeTo(Description description) {
    String message = String.format(
            "Expected an foo like [name: %s]\n" +
                    "\tbut got an foo like [name: %s]",
            name, actualFoo.getName());
    description.appendText(message);
}
public static FooMatcher IsAFooWith(String name) {
    return new FooMatcher(name);
}
</code></pre>

<p>}
```
重写了其matches方法，用此来比较两个对象是否相同。
重写的describeTo方法，为了使测试时的出错信息更直观(Good practice)。
此时，我们便可以写如下的测试:</p>

<p>``` java
public class FooTest {</p>

<pre><code>@Test
public void should_compare_foo() {
    Foo foo = new Foo("foo");
    assertThat(foo,FooMatcher.IsAFooWith("foo"));
}
</code></pre>

<p>}
```
Have Fun.</p>
]]></content>
  </entry>
  
</feed>
